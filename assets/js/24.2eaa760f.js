(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{268:function(t,e,s){"use strict";s.r(e);var r=s(28),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/10636611/how-does-access-control-allow-origin-header-work/10636765#10636765",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考一"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考二"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"引言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),s("p",[t._v("跨域问题是浏览器的同源策略导致的，不是 HTTP 协议的一部分，所以它只存在于浏览器。")]),t._v(" "),s("h2",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),s("p",[t._v("同源表示域名（或 IP）、协议、端口都相同，并且只适用于如下 protocol schemes：")]),t._v(" "),s("ul",[s("li",[t._v("http")]),t._v(" "),s("li",[t._v("https")]),t._v(" "),s("li",[t._v("data")]),t._v(" "),s("li",[t._v("chrome")]),t._v(" "),s("li",[t._v("chrome-extension")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("file 协议访问 file 协议无论如何都跨域。")])]),t._v(" "),s("h2",{attrs:{id:"浏览器判定跨域的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器判定跨域的流程"}},[t._v("#")]),t._v(" 浏览器判定跨域的流程")]),t._v(" "),s("ol",[s("li",[t._v("Browser 请求 Server")]),t._v(" "),s("li",[t._v("Server 按需在响应头中返回 Access-Control-Allow-Origin")]),t._v(" "),s("li",[t._v("Browser 根据 Access-Control-Allow-Origin 判断当前 origin 是否被包含在内，是则允许此次请求，反之 trigger the XMLHttpRequest's error event and deny the response data to the requesting")])]),t._v(" "),s("h3",{attrs:{id:"csrf-tokens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-tokens"}},[t._v("#")]),t._v(" CSRF Tokens")]),t._v(" "),s("p",[t._v("注意 images、scripts、stylesheets、iframes、form submissions 不会触发浏览器的跨域判定，不过我们可以通过 CSRF Tokens 的手段实现跨域拦截。")]),t._v(" "),s("p",[t._v("例子")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("third-part website"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("p",[t._v("Browser 尝试向 url 加载图片，它会发送 GET 请求并发送所有 cookies，为了阻止这种行为，我们需要服务端进行防护措施。通常的做法是，服务端生成一个随机唯一的 token 放到用户 session 中，并发送给 browser，页面请求图片时附带上此 token，最后服务端验证 token 的有效性。")]),t._v(" "),s("h2",{attrs:{id:"node-中的跨域代理-proxytable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-中的跨域代理-proxytable"}},[t._v("#")]),t._v(" Node 中的跨域代理 proxyTable")]),t._v(" "),s("ul",[s("li",[t._v("vue-cli 的 proxyTable 用的是 http-proxy-middleware 中间件")]),t._v(" "),s("li",[t._v("create-react-app 用的是 webpack-dev-server 内部也是用的 http-proxy-middleware")]),t._v(" "),s("li",[t._v("http-proxy-middleware 内部用的 http-proxy")])])])}),[],!1,null,null,null);e.default=a.exports}}]);