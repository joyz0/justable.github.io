(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{259:function(e,t,a){e.exports=a.p+"assets/img/1.6f2b1929.png"},329:function(e,t,a){"use strict";a.r(t);var r=a(28),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"名词介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#名词介绍"}},[e._v("#")]),e._v(" 名词介绍")]),e._v(" "),r("ul",[r("li",[e._v("渲染：主要分三个步骤")]),e._v(" "),r("li",[e._v("GPU 渲染管线：固定管线（淘汰），可编程渲染管线")]),e._v(" "),r("li",[e._v("OpenGL(Open Graphics Library)：用于渲染 2D、3D 矢量图形的跨语言、跨平台的应用程序编程接口，在着色时会用到 GLSL")]),e._v(" "),r("li",[e._v("OpenGL ES2：OpenGL 是一个非常大的 API 集合，既有老的特性，也有厂商特定的 API，也有新的 API，OpenGL ES 把 GL 那些边边角角的 API 统统都干掉，只保留最常用、最必要的那些 API，同时也是为了匹配移动芯片的特性")]),e._v(" "),r("li",[e._v("GLSL(OpenGL Shading Language)：OpenGL 着色语言，在 GPU 上执行，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程性。包含 Vertex Shader（顶点着色器）和 Fragment（片元着色器），有时还会有 Geometry Shader（几何着色器）")]),e._v(" "),r("li",[e._v("WebGL：使用 JS 对 OpenGL ES2 调用的封装，是一套用于渲染 2D 和 3D 图形的标准图形库，可以为 HTML5 Canvas 提供硬件 3D 加速渲染")]),e._v(" "),r("li",[e._v("ThreeJS：是以 WebGL 为基础的库")]),e._v(" "),r("li",[e._v("D3：是以 SVG 为基础的可视化库")]),e._v(" "),r("li",[e._v("Canvas：")])]),e._v(" "),r("h2",{attrs:{id:"绘图上下文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#绘图上下文"}},[e._v("#")]),e._v(" 绘图上下文")]),e._v(" "),r("blockquote",[r("p",[e._v("绘图上下文是个抽象层，因为需要支持不同移植，所以只提供接口，所有绘图操作都在绘图上下文中进行。对于 2D 绘图上下文来说，其平台相关的实现既可以使用 CPU 来完成 2D 相关的操作，也可以使用 3D 图形接口（如 OpenGL）来完成 2D 的操作。而对于 3D 绘图上下文来说，因为性能问题，WebKit 的移植通常都是使用 3D 图形接口（如 OpenGL 或者 Direct3D 等技术）来实现详细参考"),r("a",{attrs:{href:"https://www.jianshu.com/p/60174ad4a8c6",target:"_blank",rel:"noopener noreferrer"}},[e._v("这篇文章"),r("OutboundLink")],1),e._v("。")])]),e._v(" "),r("ol",[r("li",[e._v("2D 图形上下文（GraphicsContext）：用来绘制 2D 图形。提供基本绘图单元的绘制接口以及设置绘图的样式。绘图接口包括画点，画线、画图片、画多边形、画文字等，绘图样式包括颜色、线宽、字号大小、渐变等。LayoutObject 对象调用绘图上下文的这些基本操作就是绘制实际的显示结果。\n"),r("img",{attrs:{src:a(259),alt:""}})]),e._v(" "),r("li",[e._v("3D 绘图上下文：用来绘制 3D 图形，如 OpenGL 或者 Direct3D 等。")])]),e._v(" "),r("h2",{attrs:{id:"渲染方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#渲染方式"}},[e._v("#")]),e._v(" 渲染方式")]),e._v(" "),r("ol",[r("li",[e._v("软件渲染机制：由 CPU 负责绘制每层的内容，然后按顺序把每层‘印’在最终生成的那张大位图的不同位置，因此无需合成阶段。")]),e._v(" "),r("li",[e._v("硬件加速渲染：由 GPU 负责绘制每层的内容，GPU 负责合成")]),e._v(" "),r("li",[e._v("混合模式：由 CPU 负责绘制每层的内容，GPU 负责合成，或者是由 CPU 绘制部分层的内容，CPU 绘制另一部分层的内容，GPU 负责合成。CPU 绘制完的内容都需要传输到 GPU，为了之后的合成")])]),e._v(" "),r("p",[e._v("使用了合成技术的渲染称之为合成化渲染，如上述 2，3；硬件加速渲染方式，如上述 2，3。")]),e._v(" "),r("p",[e._v("对于常见的 2D 绘图操作，使用 GPU 来绘图不一定比使用 CPU 绘图在性能上有优势，例如绘制文字、点、线等，原因是 CPU 的使用缓存机制有效减少了重复绘制的开销而且不需要 GPU 并行性。其次，GPU 的内存资源相对 CPU 的内存资源来说比较紧张，而且网页的分层使得 GPU 的内存使用相对较多。使用 CPU 渲染还有个好处，除了第一次渲染网页绘制整个可视区域外，之后的更新都会先计算需要更新的区域，然后绘制同这些区域有交集的 LayoutObject 节点，如果更新区域跟某个 PaintLayer 有交集，还会继续查找 PaintLayer 树中包含的 LayoutObject 树中的特定一个或一些节点，而 GPU 受限于可用资源紧张，不会花时间去计算需要更新的区域，所以通常只有提升为 GraphicsLayer 时再交给 GPU 渲染比较好，不然没分合成层的化，会重绘整张位图。")]),e._v(" "),r("p",[e._v("GraphicsLayer 可以是可以在 CPU 绘制，也可以在 GPU 绘制，GPU 的作用主要是用来绘制 3D 图形并且性能特别好。")]),e._v(" "),r("h2",{attrs:{id:"书籍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#书籍"}},[e._v("#")]),e._v(" 书籍")]),e._v(" "),r("p",[e._v("《计算机图形学》《OpenGL 编程指南（第八版）》《OpenGL 超级宝典》《WebKit 技术内幕》\n《OpenGL Programming Guide》《OpenGL Bible》《OpenGL Insights》\nhttp://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf")])])}),[],!1,null,null,null);t.default=n.exports}}]);