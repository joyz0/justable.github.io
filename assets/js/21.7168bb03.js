(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{264:function(e,r,a){e.exports=a.p+"assets/img/1.95bd84b9.jpg"},342:function(e,r,a){"use strict";a.r(r);var t=a(28),s=Object(t.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"几个-demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#几个-demo"}},[e._v("#")]),e._v(" 几个 demo")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"./src/demo1"}},[e._v("demo1: 只转换箭头函数")])]),e._v(" "),t("li",[t("a",{attrs:{href:"./src/demo2"}},[e._v("demo2: 在代码中使用")])]),e._v(" "),t("li",[t("a",{attrs:{href:"./src/demo3"}},[e._v("demo3: 使用@babel/preset-env 简化配置")])]),e._v(" "),t("li",[t("a",{attrs:{href:"./src/demo4"}},[e._v("demo4: 使用@babel/plugin-transform-runtime")])]),e._v(" "),t("li",[t("a",{attrs:{href:"./src/react"}},[e._v("react")])]),e._v(" "),t("li",[t("a",{attrs:{href:"./src/webpack"}},[e._v("webpack")])])]),e._v(" "),t("h2",{attrs:{id:"babel-能做什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-能做什么"}},[e._v("#")]),e._v(" babel 能做什么")]),e._v(" "),t("ul",[t("li",[e._v("转换语法（依赖 plugins/preset）")]),e._v(" "),t("li",[e._v("降级实现新特性（依赖@babel/polyfill）")]),e._v(" "),t("li",[e._v("转换重构源码 (依赖 codemods)")])]),e._v(" "),t("p",[e._v("⚠️transform 是 string->string，parse 是 string->object。"),t("br"),e._v("\n⚠️babel 的配置优先读取当前目录，并像上层查找，直到 package.json 所在目录或 babelrc=false。")]),e._v(" "),t("h2",{attrs:{id:"核心-npm-包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心-npm-包"}},[e._v("#")]),e._v(" 核心 npm 包")]),e._v(" "),t("ul",[t("li",[e._v("@babel/core")]),e._v(" "),t("li",[e._v("@babel/cli")]),e._v(" "),t("li",[e._v("@babel/polyfill")]),e._v(" "),t("li",[e._v("@babel/presets")]),e._v(" "),t("li",[e._v("@babel/plugins")]),e._v(" "),t("li",[e._v("@babel/helpers")]),e._v(" "),t("li",[e._v("@babel/plugin-transform-runtime，@babel/runtime，@babel/runtime-corejs2，@babel/runtime-corejs3")])]),e._v(" "),t("h3",{attrs:{id:"babel-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-core"}},[e._v("#")]),e._v(" @babel/core")]),e._v(" "),t("p",[e._v("包含了核心的转换逻辑，需要对应的 plugins/preset 才能发挥作用")]),e._v(" "),t("h3",{attrs:{id:"babel-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-cli"}},[e._v("#")]),e._v(" @babel/cli")]),e._v(" "),t("p",[e._v("让我们能够在 terminal 中以命令行的方式操作 babel")]),e._v(" "),t("h3",{attrs:{id:"babel-polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-polyfill"}},[e._v("#")]),e._v(" @babel/polyfill")]),e._v(" "),t("p",[e._v("包含了 corejs 和 regenerator 这两个第三方包，不会导入小于 stage 4 的特性，默认为 core-js2。不同于 plugins 对语法的转换，polyfill 是对新实例特性的降级实现，双方是互补的关系。babel7.4.0 后@babel/polyfill 被标记为 deprecated，推荐我们直接使用 corejs 和 regenerator。")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"core-js/stable"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"regenerator-runtime/runtime"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("⚠️ 在一个开源的 library 中并不推荐使用它。"),t("br"),e._v("\n⚠️ 通常我们需要在 entry 中手动引入 polyfill，当使用 babel-node 时会自动引入。"),t("br"),e._v("\n⚠️ polyfill 会直接修改全局变量（比如 Array，String 等）prototype，某种意义上污染了全局环境，如果我们不希望污染全局变量，可以使用@babel/plugin-transform-runtime。")]),e._v(" "),t("h3",{attrs:{id:"babel-presets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-presets"}},[e._v("#")]),e._v(" @babel/presets")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("🌟@babel/preset-env"),t("br"),e._v("\n默认会根据"),t("a",{attrs:{href:"https://github.com/browserslist/browserslist#queries",target:"_blank",rel:"noopener noreferrer"}},[e._v("Browserslist"),t("OutboundLink")],1),e._v("引入对应 ES2015+版本的 polyfills，除非指定了 targets 或 ignoreBrowserslistConfig。\n包含了 plugins，会根据 useBuiltIns 选项决定以何种方式引入@babel/polyfill，当 useBuiltIns=true 时要指定 corejs 的版本。"),t("br"),e._v("\n还有许多其他的"),t("a",{attrs:{href:"https://babeljs.io/docs/en/babel-preset-env#targets",target:"_blank",rel:"noopener noreferrer"}},[e._v("参数配置"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("li",[t("p",[e._v("@babel/preset-react")])]),e._v(" "),t("li",[t("p",[e._v("@babel/preset-typescript")])])]),e._v(" "),t("h3",{attrs:{id:"babel-plugins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-plugins"}},[e._v("#")]),e._v(" @babel/plugins")]),e._v(" "),t("p",[e._v("我们这里代指一系列 plugin 包，当我们精确知道项目需要哪种语法特性时，可以单独引入所对应的 plugin 包以减少最终打包体积。"),t("br"),e._v("\n⚠️ 配置文件中的 plugins 数组执行顺序从左到右，presets 数组执行顺序从右到左。"),t("br"),e._v("\n当我们需要知道某个 plugin 包所对应的 options 时，可以参考"),t("a",{attrs:{href:"https://babeljs.io/docs/en/options",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),t("OutboundLink")],1),e._v("或去源码处查看\n"),t("img",{attrs:{src:a(264),alt:""}})]),e._v(" "),t("h3",{attrs:{id:"babel-helpers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-helpers"}},[e._v("#")]),e._v(" @babel/helpers")]),e._v(" "),t("p",[e._v("一系列工具，比如 class 语法的实现就是 helper 提供的")]),e._v(" "),t("h3",{attrs:{id:"babel-plugin-transform-runtime，-babel-runtime，-babel-runtime-corejs2，-babel-runtime-corejs3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-plugin-transform-runtime，-babel-runtime，-babel-runtime-corejs2，-babel-runtime-corejs3"}},[e._v("#")]),e._v(" @babel/plugin-transform-runtime，@babel/runtime，@babel/runtime-corejs2，@babel/runtime-corejs3")]),e._v(" "),t("p",[e._v("@babel/plugin-transform-runtime 主要做三件事")]),e._v(" "),t("ol",[t("li",[e._v("原本内嵌在每个文件的 helpers 改成模块引用的方式（需要开启 helpers 选项，默认开启），减少代码体积，依赖@babel/runtime；")]),e._v(" "),t("li",[e._v("原本转换 generator 和 async 语法后暴露在全局环境中的 regeneratorRuntime（regenerator-runtime 包提供）改为模块引用的方式（需要开启 regenerator 选项，默认开启），依赖@babel/runtime；")]),e._v(" "),t("li",[e._v("原本由于 core-js 暴露在全局环境中的 polyfill 特性（比如 Array.prototype.includes）改成模块引用的方式（需要开启 corejs 选项，默认关闭），依赖@babel/runtime-corejs2 或@babel/runtime-corejs3。")])]),e._v(" "),t("blockquote",[t("p",[e._v("关于 helpers、generator、polyfill 的引用方式———全局污染、局部引用、代码内嵌，在 webpack 和 rollup 使用时要分开了解，不然太乱了。。rollup 有一个额外的 rollup-plugin-babel，虽说会采用本地的 .babelrc 文件中的配置，但又额外增加了一些选项，而有些选项又是和 @babel/plugin-transform-runtime 中的重复的，比如 @babel/plugin-transform-runtime 中 helpers 默认是 tru e 的，但在 rollup 中需要开启 runtimeHelpers；类似的还有 externalHelpers，它的效果是变成全局污染模式。")])]),e._v(" "),t("h2",{attrs:{id:"常用配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用配置"}},[e._v("#")]),e._v(" 常用配置")]),e._v(" "),t("h4",{attrs:{id:"spec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spec"}},[e._v("#")]),e._v(" spec")]),e._v(" "),t("p",[e._v("boolean, defaults to false\n作用于@babel/plugin-transform-arrow-function")]),e._v(" "),t("ol",[t("li",[e._v("为方法绑定了与定义同层 context 的 this")]),e._v(" "),t("li",[e._v("校验了是否被用作于 new 实例")]),e._v(" "),t("li",[e._v("为方法增加了 name")])]),e._v(" "),t("h4",{attrs:{id:"loose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loose"}},[e._v("#")]),e._v(" loose")]),e._v(" "),t("p",[e._v("boolean, defaults to false\n默认转换 class 时，会通过 Object.defineProperty 来定义 prototype 中的方法，并设置成 non-enumerable（这是 ES6 的要求）。如果实际项目中不依赖 non-enumerable 这个特性，则 loose=true 会减少代码体积。")]),e._v(" "),t("h4",{attrs:{id:"usebuiltins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usebuiltins"}},[e._v("#")]),e._v(" useBuiltIns")]),e._v(" "),t("p",[e._v("默认不指定\n作用于在 webpack 下使用 babel 时，控制@babel/preset-env 以何种方式引入@babel/polyfill，")]),e._v(" "),t("ol",[t("li",[e._v("不指定")])]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  entry"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"@babel/polyfill"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./app/js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("usage：不用在 entry 中手动引入，babel 会根据实际使用的特性引入相对应的 polyfill")]),e._v(" "),t("li",[e._v("entry：需要我们在 entry 中手动通过 import/require 的形式引入")])]),e._v(" "),t("h2",{attrs:{id:"使用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[e._v("#")]),e._v(" 使用方式")]),e._v(" "),t("ul",[t("li",[e._v("通过命令行转换")]),e._v(" "),t("li",[e._v("直接在代码中转换")]),e._v(" "),t("li",[e._v("使用 webpack 和 babel-loader")])]),e._v(" "),t("h2",{attrs:{id:"自定义-preset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义-preset"}},[e._v("#")]),e._v(" 自定义 preset")]),e._v(" "),t("h2",{attrs:{id:"自定义-plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义-plugin"}},[e._v("#")]),e._v(" 自定义 plugin")]),e._v(" "),t("h2",{attrs:{id:"corejs2-和-corejs3-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#corejs2-和-corejs3-的区别"}},[e._v("#")]),e._v(" corejs2 和 corejs3 的区别")]),e._v(" "),t("p",[e._v("core-js@2 分支中不包含一些最新的实例方法特性，新特性都会添加到 core-js@3，建议都使用后者。例如 core-js@2 不包含 rray.prototype.flat()。")]),e._v(" "),t("h2",{attrs:{id:"corejs3-和-babel-runtime-corejs3-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#corejs3-和-babel-runtime-corejs3-的区别"}},[e._v("#")]),e._v(" corejs3 和 @babel/runtime-corejs3 的区别")]),e._v(" "),t("p",[e._v("前者的 polyfill 都是修改全局对象的 prototype 中的，后者是局部文件中以引用的形式存在不会污染全局变量。")]),e._v(" "),t("h2",{attrs:{id:"stage-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stage-介绍"}},[e._v("#")]),e._v(" stage 介绍")]),e._v(" "),t("ul",[t("li",[e._v("Stage 0 - Strawman: just an idea, possible Babel plugin.")]),e._v(" "),t("li",[e._v("Stage 1 - Proposal: this is worth working on.")]),e._v(" "),t("li",[e._v("Stage 2 - Draft: initial spec.")]),e._v(" "),t("li",[e._v("Stage 3 - Candidate: complete spec and initial browser implementations.")]),e._v(" "),t("li",[e._v("Stage 4 - Finished: will be added to the next yearly release.")])])])}),[],!1,null,null,null);r.default=s.exports}}]);